<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>Python Graphics Learning</title>

    <!-- Inject shapes code for app.js to use -->
    <script>
        window.SHAPES_CODE = `{{ shapes_code }}`;
    </script>

    <!-- Alpine app state (must load before Alpine.js) -->
    <script src="/static/js/app.js"></script>

    <!-- Alpine.js -->
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

    <!-- CodeMirror 6 styles are included in the library -->

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            height: 100vh;
            overflow: hidden;
        }

        /* App Container */
        .app-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: hidden;
        }

        /* Error Banner */
        .error {
            background: #f44336;
            color: white;
            padding: 10px 20px;
            display: none;
        }

        /* Main Layout: 2 Columns */
        .main-layout {
            display: flex;
            flex: 1;
            overflow: hidden;
            position: relative;
        }

        /* Left Sidebar (20% width) */
        .left-sidebar {
            width: 20%;
            min-width: 250px;
            max-width: 350px;
            background: #f5f5f5;
            border-right: 2px solid #ddd;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
            position: relative;
        }

        .sidebar-collapse {
            position: absolute;
            top: 10px;
            right: 10px;
            background: transparent;
            border: none;
            font-size: 16px;
            cursor: pointer;
            color: #666;
            padding: 5px 10px;
            border-radius: 4px;
            z-index: 10;
        }

        .sidebar-collapse:hover {
            background: rgba(0, 0, 0, 0.05);
        }

        .sidebar-expand {
            position: absolute;
            left: 0;
            top: 10px;
            background: #4CAF50;
            color: white;
            border: none;
            font-size: 16px;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 0 4px 4px 0;
            box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2);
            z-index: 10;
        }

        .sidebar-expand:hover {
            background: #45a049;
        }

        /* Sidebar Content */
        .sidebar-content {
            display: flex;
            flex-direction: column;
            height: 100%;
            padding: 20px;
            overflow-y: auto;
        }

        /* Lesson List */
        .lesson-list {
            margin-bottom: 20px;
        }

        .lesson-list h3 {
            font-size: 14px;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .lesson-item {
            margin: 10px 0;
            border-radius: 8px;
            overflow: hidden;
            background: white;
            transition: all 0.2s;
        }

        .lesson-item:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .lesson-item.active {
            background: #e3f2fd;
            border-left: 4px solid #2196F3;
        }

        .lesson-item.completed {
            border-left: 4px solid #4CAF50;
        }

        .lesson-link {
            display: flex;
            align-items: center;
            padding: 12px;
            text-decoration: none;
            color: inherit;
        }

        .lesson-icon {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 12px;
            flex-shrink: 0;
        }

        .lesson-item.completed .lesson-icon {
            background: #4CAF50;
            color: white;
        }

        .lesson-item.active .lesson-icon {
            background: #2196F3;
            color: white;
        }

        .lesson-info {
            flex: 1;
            min-width: 0;
        }

        .lesson-title {
            font-weight: 500;
            margin-bottom: 4px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .lesson-meta {
            display: flex;
            gap: 8px;
            font-size: 12px;
            color: #666;
        }

        .difficulty {
            background: #e0e0e0;
            padding: 2px 8px;
            border-radius: 3px;
        }

        .duration {
            background: #e0e0e0;
            padding: 2px 8px;
            border-radius: 3px;
        }

        .btn-block {
            display: block;
            width: 100%;
        }

        /* Lesson Selector (legacy - keep for backward compat) */
        .lesson-selector {
            margin-bottom: 20px;
        }

        .lesson-selector label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .lesson-dropdown {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: white;
            font-size: 14px;
            cursor: pointer;
        }

        .lesson-dropdown:focus {
            outline: none;
            border-color: #4CAF50;
        }

        /* Sidebar Instructions */
        .sidebar-instructions {
            flex: 1;
            margin-bottom: 20px;
            overflow-y: auto;
        }

        .sidebar-instructions h3 {
            font-size: 14px;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .sidebar-instructions h3:not(:first-child) {
            margin-top: 15px;
        }

        .sidebar-instructions code {
            background: #fff;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Monaco', 'Courier New', monospace;
            font-size: 12px;
        }

        .sidebar-instructions ul {
            margin-left: 18px;
            line-height: 1.5;
            font-size: 13px;
        }

        .sidebar-instructions li {
            margin: 6px 0;
        }

        .sidebar-instructions p {
            font-size: 13px;
            line-height: 1.5;
            margin: 8px 0;
        }

        .hint {
            background: #fff8dc;
            padding: 8px;
            border-left: 3px solid #ffa500;
            margin: 8px 0;
            border-radius: 3px;
            font-size: 12px;
        }

        .btn-text {
            background: transparent;
            border: none;
            color: #4CAF50;
            cursor: pointer;
            font-size: 12px;
            margin-top: 8px;
            padding: 4px 0;
        }

        .btn-text:hover {
            text-decoration: underline;
        }

        /* Sidebar Actions (at bottom) */
        .sidebar-actions {
            border-top: 1px solid #ddd;
            padding-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .btn-run {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
        }

        .btn-run:hover {
            background: #45a049;
        }

        .btn-run:disabled {
            background: #999;
            cursor: not-allowed;
        }

        .btn-secondary {
            background: #666;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 13px;
        }

        .btn-secondary:hover {
            background: #777;
        }

        .status-text {
            font-size: 12px;
            color: #666;
            text-align: center;
            padding: 4px 0;
            min-height: 20px;
        }

        /* Right Area: Editor + Output (80% width) */
        .right-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Editor Panel (top 50%) */
        .editor-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            border-bottom: 2px solid #ddd;
        }

        .editor-container {
            flex: 1;
            position: relative;
            background: #282a36;
            overflow: hidden;
        }

        .editor-container .cm-editor {
            height: 100%;
            font-family: 'Monaco', 'Courier New', monospace;
            font-size: 14px;
        }

        .editor-container .cm-scroller {
            overflow: auto;
        }

        #editor {
            display: none;
        }

        /* Output Panel (bottom 50%) */
        .output-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Output Tabs */
        .output-tabs {
            display: flex;
            background: #2d2d2d;
            border-bottom: 2px solid #444;
        }

        .tab-btn {
            flex: 1;
            padding: 10px;
            background: transparent;
            color: #aaa;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
        }

        .tab-btn:hover {
            background: #3d3d3d;
            color: #fff;
        }

        .tab-btn.active {
            background: #4CAF50;
            color: white;
        }

        .output-content {
            flex: 1;
            overflow: auto;
            background: white;
        }

        .output-content > div {
            height: 100%;
        }

        .canvas-container {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .canvas-container svg {
            max-width: 100%;
            max-height: 100%;
            height: auto;
        }

        .output-text {
            padding: 20px;
        }

        .output-text pre {
            background: #f5f5f5;
            padding: 10px;
            border-radius: 4px;
            font-family: 'Monaco', 'Courier New', monospace;
            font-size: 13px;
        }

        .error-message {
            background: #ffebee;
            border-left: 4px solid #f44336;
            padding: 10px;
            margin-top: 10px;
        }

        .error-message pre {
            background: transparent;
            color: #c62828;
        }

        .help-content {
            padding: 20px;
            line-height: 1.6;
            font-size: 14px;
        }

        /* Loading Overlay */
        .loading {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px 40px;
            border-radius: 8px;
            font-size: 16px;
            z-index: 1000;
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .left-sidebar {
                width: 250px;
                min-width: 250px;
            }
        }

        @media (max-width: 768px) {
            .left-sidebar {
                position: fixed;
                left: 0;
                top: 0;
                bottom: 0;
                width: 280px;
                z-index: 100;
                box-shadow: 2px 0 10px rgba(0, 0, 0, 0.3);
            }

            .right-area {
                width: 100%;
            }
        }
    </style>
</head>

<body>
    <div x-data="appState()" class="app-container">

        <div class="error" id="error"></div>

        <!-- Main Layout: 2 Columns -->
        <div class="main-layout">

            <!-- Left Sidebar (20%) -->
            <aside x-show="showSidebar"
                   x-transition
                   class="left-sidebar">
                <!-- Collapse button -->
                <button @click="showSidebar = false; localStorage.setItem('showSidebar', 'false')" class="sidebar-collapse" title="Hide sidebar">
                    ◀
                </button>
                {% include 'components/sidebar.html' %}
            </aside>

            <!-- Expand button (when sidebar hidden) -->
            <button x-show="!showSidebar"
                    @click="showSidebar = true; localStorage.setItem('showSidebar', 'true')"
                    class="sidebar-expand"
                    title="Show sidebar">
                ▶
            </button>

            <!-- Right Area: Editor + Canvas (80%) -->
            <div class="right-area">

                <!-- Top: Editor (50%) -->
                <div class="editor-panel">
                    <div class="editor-container">
                        <textarea id="editor" spellcheck="false">{{ lesson.starter_code }}</textarea>
                    </div>
                </div>

                <!-- Bottom: Canvas/Output/Help Tabs (50%) -->
                <div class="output-panel">
                    {% include 'components/output-tabs.html' %}
                </div>

            </div>

        </div>
    </div>

    <div class="loading" id="loading">Loading Python... ⏳</div>

    <!-- Import Map for CodeMirror 6 -->
    <script type="importmap">
    {
        "imports": {
            "@codemirror/": "https://esm.sh/@codemirror/",
            "@lezer/": "https://esm.sh/@lezer/",
            "codemirror": "https://esm.sh/codemirror@6.0.1"
        }
    }
    </script>

    <script type="module">
        import { EditorView, basicSetup } from "codemirror";
        import { python } from "@codemirror/lang-python";
        import { oneDark } from "@codemirror/theme-one-dark";
        import { autocompletion } from "@codemirror/autocomplete";
        import { keymap } from "@codemirror/view";
        import { Prec } from "@codemirror/state";

        let editor;

        // ===== API DEFINITIONS WITH DEFAULT PARAMETERS =====
        const API_DEFINITIONS = window.API_DEFINITIONS = (function() {
            const api = {};

            // Canvas methods with working example code (includes parameter names)
            api['can'] = [
                {
                    label: "circle",
                    type: "method",
                    apply: "circle(x=100, y=100, radius=50, fill=Color.RED)",
                    detail: "(x, y, radius, fill=None, outline=None)",
                    info: "Draw a circle at position (x, y) with given radius"
                },
                {
                    label: "rect",
                    type: "method",
                    apply: "rect(x=100, y=100, width=200, height=150, fill=Color.BLUE)",
                    detail: "(x, y, width, height, fill=None, outline=None)",
                    info: "Draw a rectangle"
                },
                {
                    label: "ellipse",
                    type: "method",
                    apply: "ellipse(x=200, y=150, width=100, height=60, fill=Color.GREEN)",
                    detail: "(x, y, width, height, fill=None, outline=None)",
                    info: "Draw an ellipse"
                },
                {
                    label: "line",
                    type: "method",
                    apply: "line(x1=50, y1=50, x2=200, y2=200, color=Color.BLACK, width=2)",
                    detail: "(x1, y1, x2, y2, color=None, width=1)",
                    info: "Draw a line between two points"
                },
                {
                    label: "polygon",
                    type: "method",
                    apply: "polygon(points=[(100, 100), (200, 100), (150, 200)], fill=Color.PURPLE)",
                    detail: "(points, fill=None, outline=None)",
                    info: "Draw a polygon from a list of points"
                },
                {
                    label: "text",
                    type: "method",
                    apply: "text(x=100, y=100, text=\"Hello!\", font_size=24, color=Color.BLACK)",
                    detail: "(x, y, text, font_size=12, color=None)",
                    info: "Draw text at position (x, y)"
                },
                {
                    label: "rounded_rect",
                    type: "method",
                    apply: "rounded_rect(x=100, y=100, width=200, height=150, radius=15, fill=Color.ORANGE)",
                    detail: "(x, y, width, height, radius, fill=None, outline=None)",
                    info: "Draw a rectangle with rounded corners"
                },
                {
                    label: "grid",
                    type: "method",
                    apply: "grid(spacing=50, show_coords=True)",
                    detail: "(spacing=50, color='#E8E8E8', show_coords=False)",
                    info: "Draw a coordinate grid with optional labels"
                },
                {
                    label: "show_palette",
                    type: "method",
                    apply: "show_palette(palette_class=CreativeGardenPalette)",
                    detail: "(palette_class, columns=4, rect_width=120, rect_height=40, padding=10)",
                    info: "Display all colors from a palette class"
                },
                { label: "to_svg", type: "method", apply: "to_svg()", detail: "()", info: "Return SVG string representation" },
                { label: "clear", type: "method", apply: "clear()", detail: "()", info: "Clear the canvas" }
            ];

            // Extract palette colors dynamically from embedded Python code
            const shapesCode = `{{ shapes_code }}`;
            let match;

            // Extract Color class constants
            const colorRegex = /class\s+Color:[\s\S]*?(?=\n(?:class|def|\Z))/;
            const colorMatch = shapesCode.match(colorRegex);
            if (colorMatch) {
                const colorCode = colorMatch[0];
                const colorConstRegex = /(\w+)\s*=\s*["']#[0-9A-Fa-f]{6}["']/g;
                const colors = [];
                while ((match = colorConstRegex.exec(colorCode)) !== null) {
                    colors.push({
                        label: match[1],
                        type: "constant",
                        apply: match[1],
                        info: `Color constant`
                    });
                }
                api['Color'] = colors;
            }

            // Extract CreativeGardenPalette constants
            const gardenRegex = /class\s+CreativeGardenPalette:[\s\S]*?(?=\n(?:class|def|\Z))/;
            const gardenMatch = shapesCode.match(gardenRegex);
            if (gardenMatch) {
                const gardenCode = gardenMatch[0];
                const gardenConstRegex = /(\w+)\s*=\s*["']#[0-9A-Fa-f]{6}["']/g;
                const gardenColors = [];
                while ((match = gardenConstRegex.exec(gardenCode)) !== null) {
                    gardenColors.push({
                        label: match[1],
                        type: "constant",
                        apply: match[1],
                        info: `CreativeGardenPalette color`
                    });
                }
                api['CreativeGardenPalette'] = gardenColors;
            }

            // Extract CalmOasisPalette constants
            const oasisRegex = /class\s+CalmOasisPalette:[\s\S]*?(?=\n(?:class|def|\Z))/;
            const oasisMatch = shapesCode.match(oasisRegex);
            if (oasisMatch) {
                const oasisCode = oasisMatch[0];
                const oasisConstRegex = /(\w+)\s*=\s*["']#[0-9A-Fa-f]{6}["']/g;
                const oasisColors = [];
                while ((match = oasisConstRegex.exec(oasisCode)) !== null) {
                    oasisColors.push({
                        label: match[1],
                        type: "constant",
                        apply: match[1],
                        info: `CalmOasisPalette color`
                    });
                }
                api['CalmOasisPalette'] = oasisColors;
            }

            return api;
        })();

        // General keywords (classes) with working examples
        const generalKeywords = [
            {
                label: "Canvas",
                type: "class",
                apply: "Canvas(width=800, height=600)",
                detail: "(width, height)",
                info: "Create a new drawing canvas"
            },
            {
                label: "Color",
                type: "class",
                apply: "Color.",
                info: "Basic color palette class"
            },
            {
                label: "CreativeGardenPalette",
                type: "class",
                apply: "CreativeGardenPalette.",
                info: "Pastel color palette for creative projects"
            },
            {
                label: "CalmOasisPalette",
                type: "class",
                apply: "CalmOasisPalette.",
                info: "Calming blues and greens color palette"
            }
        ];

        // Smart completion function that detects object.method patterns (CodeMirror 6 API)
        function smartPythonCompletions(context) {
            // Get text before cursor
            let before = context.matchBefore(/\w+\.\w*/);

            // Check if we're typing after a dot (e.g., "can.circle")
            if (before) {
                let text = before.text;
                let dotIndex = text.lastIndexOf('.');

                if (dotIndex > 0) {
                    // Extract object name and partial method
                    let objectName = text.substring(0, dotIndex);
                    let partialMethod = text.substring(dotIndex + 1);

                    // Look up methods for this object
                    if (API_DEFINITIONS[objectName]) {
                        let methods = API_DEFINITIONS[objectName];

                        return {
                            from: before.from + dotIndex + 1,
                            options: methods,
                            validFor: /^\w*$/
                        };
                    }
                }
            }

            // Otherwise, check for regular word completion
            let word = context.matchBefore(/\w*/);
            if (!word || (word.from == word.to && !context.explicit))
                return null;

            return {
                from: word.from,
                options: generalKeywords,
                validFor: /^\w*$/
            };
        }

        // Note: runCode and clearCanvas are defined in app.js and exposed via window
        // They're already available for the keyboard shortcuts and onclick handlers

        // Get initial code from textarea
        const initialCode = document.getElementById('editor').value;

        // Initialize CodeMirror 6 editor
        editor = new EditorView({
            doc: initialCode,
            extensions: [
                basicSetup,
                python(),
                oneDark,

                // Autocompletion with custom source
                autocompletion({
                    override: [smartPythonCompletions],
                    defaultKeymap: true
                }),

                EditorView.lineWrapping,

                // Add keyboard shortcuts with highest precedence (Mod-Enter = Cmd-Enter on Mac, Ctrl-Enter on Windows/Linux)
                Prec.highest(keymap.of([
                    {
                        key: 'Mod-Enter',
                        run: () => {
                            window.runCode();
                            return true;
                        }
                    }
                ]))
            ],
            parent: document.querySelector('.editor-container')
        });

        // Hide the textarea since CodeMirror creates its own DOM
        document.getElementById('editor').style.display = 'none';

        // Expose editor to window for app.js to access
        window.editorView = editor;

        // Note: Pyodide initialization is handled by the worker (via app.js)
        // Run button will be enabled when worker is ready
        document.getElementById('runBtn').disabled = true;
    </script>

    <!-- Inject lesson data -->
    <script>
        window.CURRENT_LESSON = {{ lesson | tojson }};
        window.ALL_LESSONS = {{ all_lessons | tojson }};
    </script>
    </div>
</body>

</html>