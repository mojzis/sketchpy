<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>Python Graphics Learning</title>

    <!-- Inject configuration for modules to use -->
    <script>
        window.SHAPES_CODE = `{{ shapes_code }}`;
        window.BASE_PATH = {{ base_path | tojson }};
        window.CURRENT_LESSON = {{ lesson | tojson }};
        window.ALL_LESSONS = {{ all_lessons | tojson }};
    </script>

    <!-- Import lesson state module (Alpine.js app state) -->
    <script type="module">
        import { createAppState } from '{{ base_path }}/static/js/core/lessonState.js';

        // Make appState available for Alpine.js
        window.appState = createAppState;

        // Keep these for backward compatibility with HTML onclick
        window.runCode = function() {
            const app = Alpine.$data(document.querySelector('[x-data]'));
            if (app) app.runCode();
        };

        window.clearCanvas = function() {
            const app = Alpine.$data(document.querySelector('[x-data]'));
            if (app) app.clearCanvas();
        };
    </script>

    <!-- Alpine app state (OLD - now loaded from module) -->
    <script style="display: none;">
        /**
         * DEPRECATED: This code has been moved to static/js/core/lessonState.js
         * Keeping this comment block for reference during migration.
         */
        function appState_OLD() {
            return {
                // UI visibility
                showSidebar: true,
                showInstructions: true,
                activeTab: 'canvas',

                // Execution state
                isRunning: false,
                output: '',
                error: null,  // Changed to null to store formatted error object
                errorText: '', // Plain text version for banner

                // Pyodide worker
                pyodideWorker: null,
                pyodideReady: false,

                // Error handler (initialized after Pyodide is ready)
                errorHandler: null,

                // Current lesson and all lessons
                lesson: window.CURRENT_LESSON || null,
                lessons: window.ALL_LESSONS || [],
                currentLessonId: window.CURRENT_LESSON?.id,

                // Initialization
                init() {
                    console.log('Alpine initialized');
                    console.log('Current lesson:', this.lesson?.id);
                    this.loadSidebarState();
                    this.initPyodideWorker();
                },

                // Sidebar Management
                loadSidebarState() {
                    const saved = localStorage.getItem('showSidebar');
                    if (saved !== null) {
                        this.showSidebar = saved === 'true';
                    }
                },

                // Initialize Pyodide Worker
                initPyodideWorker() {
                    console.log('Initializing Pyodide worker...');

                    // Use base path from configuration
                    const basePath = window.BASE_PATH || '';
                    const isInLessonsDir = window.location.pathname.includes('/lessons/');
                    const workerPath = isInLessonsDir
                        ? `${basePath}/static/js/pyodide-worker.js`  // From lessons/ subdirectory
                        : `${basePath}/static/js/pyodide-worker.js`; // From root

                    this.pyodideWorker = new Worker(workerPath);

                    this.pyodideWorker.onmessage = (event) => {
                        this.handleWorkerMessage(event);
                    };

                    this.pyodideWorker.onerror = (error) => {
                        console.error('Worker error:', error);
                        this.error = 'Worker initialization failed: ' + error.message;
                    };

                    // Send shapes code to worker
                    // Note: shapes_code is injected via template as window.SHAPES_CODE
                    this.pyodideWorker.postMessage({
                        type: 'init',
                        shapes: window.SHAPES_CODE
                    });
                },

                // Handle messages from worker
                async handleWorkerMessage(event) {
                    const { type, output, svg, error, errorData, code } = event.data;

                    if (type === 'ready') {
                        console.log('Pyodide worker ready!');
                        this.pyodideReady = true;

                        // Dynamically import error handler when Pyodide is ready
                        try {
                            const basePath = window.BASE_PATH || '';
                            const { PyodideErrorHandler } = await import(`${basePath}/static/js/errorHandler.js`);
                            this.errorHandler = new PyodideErrorHandler(null);
                            console.log('✓ Error handler ready');
                        } catch (e) {
                            console.error('Failed to load error handler:', e);
                        }

                        document.getElementById('loading').style.display = 'none';
                        document.getElementById('runBtn').disabled = false;
                        document.getElementById('status').textContent = 'Ready! ✓';

                        // Auto-run code on load
                        this.runCode();
                    } else if (type === 'result') {
                        this.isRunning = false;

                        const canvasDiv = document.getElementById('canvas');
                        const errorDiv = document.getElementById('error');
                        const statusSpan = document.getElementById('status');

                        if (error) {
                            // Error occurred - format it with errorHandler
                            let formattedError;

                            if (errorData && this.errorHandler) {
                                // Use structured error data to create friendly message
                                formattedError = this.errorHandler.formatForBeginners(errorData, code || window.editorView?.state.doc.toString());
                            } else if (this.errorHandler) {
                                // Try to extract error info from the message string
                                const parsedError = this.parseErrorMessage(error);
                                const currentCode = code || window.editorView?.state.doc.toString();

                                if (parsedError) {
                                    formattedError = this.errorHandler.formatForBeginners(parsedError, currentCode);
                                } else {
                                    // Fallback to simple format
                                    const lineNum = this.extractLineFromMessage(error);
                                    formattedError = {
                                        title: 'Error',
                                        explanation: error,
                                        hint: this.getSimpleHint(error),
                                        line: lineNum,
                                        snippet: this.errorHandler && lineNum ?
                                            this.errorHandler.getSnippet(currentCode, lineNum) : null,
                                        category: 'python'
                                    };
                                }
                            } else {
                                // No error handler available
                                formattedError = {
                                    title: 'Error',
                                    explanation: error,
                                    hint: null,
                                    line: null,
                                    snippet: null,
                                    category: 'python'
                                };
                            }

                            // Store formatted error for UI
                            this.error = formattedError;
                            this.errorText = error; // Keep plain text for banner
                            this.activeTab = 'output';

                            // Update banner - just say to check output
                            errorDiv.innerHTML = '<span style="cursor: pointer;" @click="activeTab = \'output\'">⚠️ Error occurred - click to view details in Output tab</span>';
                            errorDiv.style.display = 'block';

                            statusSpan.textContent = 'Error';
                            statusSpan.style.color = '#f44336';

                            // Highlight error line in editor if available
                            if (formattedError.line && window.editorView) {
                                this.highlightErrorLine(formattedError.line);
                            }
                        } else if (svg) {
                            // Success - got SVG
                            canvasDiv.innerHTML = svg;
                            this.activeTab = 'canvas';
                            statusSpan.textContent = 'Success! ✓';
                            statusSpan.style.color = '#4CAF50';
                            this.markComplete(this.currentLessonId);

                            // Clear any previous errors
                            this.error = null;
                            this.errorText = '';
                            errorDiv.style.display = 'none';
                        } else {
                            // No SVG returned
                            canvasDiv.innerHTML = '<div style="color: #999;">Make sure your code ends with "can" to display the canvas.</div>';
                            statusSpan.textContent = '';
                        }

                        // Store output
                        this.output = output || '';
                    }
                },

                // Run code (updated to use worker)
                async runCode() {
                    if (this.isRunning || !this.pyodideReady) return;

                    this.isRunning = true;
                    this.output = '';
                    this.error = '';
                    this.activeTab = 'canvas';

                    const code = window.editorView.state.doc.toString();
                    const errorDiv = document.getElementById('error');
                    const statusSpan = document.getElementById('status');

                    errorDiv.style.display = 'none';
                    statusSpan.textContent = 'Running...';

                    // Basic security validation (worker does deeper validation)
                    // Check code length
                    if (code.length > 10000) {
                        this.isRunning = false;
                        this.error = 'Code too long (max 10,000 characters)';
                        errorDiv.textContent = '❌ ' + this.error;
                        errorDiv.style.display = 'block';
                        statusSpan.textContent = 'Error';
                        return;
                    }

                    // Check for obviously forbidden patterns
                    // Note: compile() is kept for Pyodide internal use
                    const forbidden = [
                        /\bimport\s+js\b/, /\bfrom\s+js\b/,
                        /\beval\s*\(/, /\bexec\s*\(/, /\bopen\s*\(/
                    ];
                    for (const pattern of forbidden) {
                        if (pattern.test(code)) {
                            this.isRunning = false;
                            this.error = `Forbidden pattern detected: ${pattern.source}`;
                            errorDiv.textContent = '❌ Security: ' + this.error;
                            errorDiv.style.display = 'block';
                            statusSpan.textContent = 'Error';
                            return;
                        }
                    }

                    // Send code to worker (which will do full security validation)
                    this.pyodideWorker.postMessage({
                        type: 'run',
                        code: code
                    });
                },

                // Progress Tracking
                isCompleted(lessonId) {
                    const progress = JSON.parse(localStorage.getItem('lessonProgress') || '{}');
                    return !!progress[lessonId];
                },

                markComplete(lessonId) {
                    const progress = JSON.parse(localStorage.getItem('lessonProgress') || '{}');
                    progress[lessonId] = {
                        completed: true,
                        timestamp: new Date().toISOString()
                    };
                    localStorage.setItem('lessonProgress', JSON.stringify(progress));
                    console.log(`Marked lesson ${lessonId} as complete`);
                },

                resetProgress() {
                    if (confirm('Reset all progress? This cannot be undone.')) {
                        localStorage.removeItem('lessonProgress');
                        location.reload();
                    }
                },

                // Clear Canvas (moved from window.clearCanvas)
                clearCanvas() {
                    document.getElementById('canvas').innerHTML = '<div style="color: #999;">Canvas cleared. Click "Run Code" to draw.</div>';
                    document.getElementById('error').style.display = 'none';
                    this.output = '';
                    this.error = null;
                    this.errorText = '';
                },

                // Get error icon based on category
                getErrorIcon(category) {
                    const icons = {
                        python: '⚠️',      // Learning opportunity
                        security: 'ℹ️',    // Information
                        timeout: '⏱️',     // Performance issue
                        system: '⚙️'       // Technical problem
                    };
                    return icons[category] || '⚠️';
                },

                // Parse error message to extract structured info
                parseErrorMessage(errorMsg) {
                    // Pyodide sends full traceback - we want only the last line (actual error)
                    // Example full traceback:
                    // Traceback (most recent call last):
                    //   File "/lib/python311.zip/_pyodide/_base.py", line 573, in eval_code_async
                    //   File "<exec>", line 20, in <module>
                    // NameError: name 'hoho' is not defined

                    if (!errorMsg) return null;

                    // Split into lines and find the last line with an error type
                    const lines = errorMsg.trim().split('\n');
                    const errorLine = lines.reverse().find(line => /\w+Error:/.test(line));

                    if (errorLine) {
                        // Parse the error line: "NameError: name 'xx' is not defined"
                        const match = errorLine.match(/(\w+Error):\s*(.+)/);
                        if (match) {
                            return {
                                type: match[1],
                                message: match[2].trim(),
                                line: this.extractLineFromMessage(errorMsg)
                            };
                        }
                    }

                    return null;
                },

                // Extract line number from error message
                extractLineFromMessage(errorMsg) {
                    // Look for line number in <exec> frame (user's code), not Pyodide internals
                    // Example: File "<exec>", line 20, in <module>
                    const execMatch = errorMsg.match(/<exec>",\s*line\s+(\d+)/);
                    if (execMatch) {
                        return parseInt(execMatch[1]);
                    }

                    // Fallback: look for any line number (but this might be wrong)
                    const match = errorMsg.match(/line (\d+)/i);
                    return match ? parseInt(match[1]) : null;
                },

                // Get simple hint based on error message
                getSimpleHint(errorMsg) {
                    if (errorMsg.includes('not defined')) {
                        const match = errorMsg.match(/name '(\w+)' is not defined/);
                        if (match) {
                            return `Define the variable first: ${match[1]} = ...`;
                        }
                        return 'Make sure to define variables before using them';
                    }
                    if (errorMsg.includes('Canvas') && errorMsg.includes('not found')) {
                        return 'Create a canvas first: can = Canvas(800, 600)';
                    }
                    if (errorMsg.includes('SyntaxError')) {
                        return 'Check for missing colons, quotes, or brackets';
                    }
                    if (errorMsg.includes('IndentationError')) {
                        return 'Make sure all lines at the same level have the same spacing';
                    }
                    return null;
                },

                // Highlight error line in CodeMirror editor
                highlightErrorLine(lineNumber) {
                    if (!window.editorView) return;

                    try {
                        const view = window.editorView;
                        const doc = view.state.doc;

                        // Get the line position
                        if (lineNumber > 0 && lineNumber <= doc.lines) {
                            const line = doc.line(lineNumber);

                            // Scroll to the error line (simple scrolling without EditorView import)
                            view.dispatch({
                                selection: { anchor: line.from },
                                scrollIntoView: true
                            });

                            console.log(`Scrolled to error line ${lineNumber}`);
                        }
                    } catch (e) {
                        console.error('Failed to highlight error line:', e);
                    }
                }
            }
        }
        // END OLD appState_OLD function - moved to static/js/core/lessonState.js
    </script>

    <!-- CodeMirror 6 styles are included in the library -->

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            height: 100vh;
            overflow: hidden;
        }

        /* App Container */
        .app-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: hidden;
        }

        /* Error Banner */
        .error {
            background: #f44336;
            color: white;
            padding: 10px 20px;
            display: none;
        }

        /* Main Layout: 2 Columns */
        .main-layout {
            display: flex;
            flex: 1;
            overflow: hidden;
            position: relative;
        }

        /* Left Sidebar (20% width) */
        .left-sidebar {
            width: 20%;
            min-width: 250px;
            max-width: 350px;
            background: #f5f5f5;
            border-right: 2px solid #ddd;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
            position: relative;
        }

        .sidebar-collapse {
            position: absolute;
            top: 10px;
            right: 10px;
            background: transparent;
            border: none;
            font-size: 16px;
            cursor: pointer;
            color: #666;
            padding: 5px 10px;
            border-radius: 4px;
            z-index: 10;
        }

        .sidebar-collapse:hover {
            background: rgba(0, 0, 0, 0.05);
        }

        .sidebar-expand {
            position: absolute;
            left: 0;
            top: 10px;
            background: #4CAF50;
            color: white;
            border: none;
            font-size: 16px;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 0 4px 4px 0;
            box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2);
            z-index: 10;
        }

        .sidebar-expand:hover {
            background: #45a049;
        }

        /* Sidebar Content */
        .sidebar-content {
            display: flex;
            flex-direction: column;
            height: 100%;
            padding: 20px;
            overflow-y: auto;
        }

        /* Lesson List */
        .lesson-list {
            margin-bottom: 20px;
        }

        .lesson-list h3 {
            font-size: 14px;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .lesson-item {
            margin: 10px 0;
            border-radius: 8px;
            overflow: hidden;
            background: white;
            transition: all 0.2s;
        }

        .lesson-item:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .lesson-item.active {
            background: #e3f2fd;
            border-left: 4px solid #2196F3;
        }

        .lesson-item.completed {
            border-left: 4px solid #4CAF50;
        }

        .lesson-link {
            display: flex;
            align-items: center;
            padding: 12px;
            text-decoration: none;
            color: inherit;
        }

        .lesson-icon {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 12px;
            flex-shrink: 0;
        }

        .lesson-item.completed .lesson-icon {
            background: #4CAF50;
            color: white;
        }

        .lesson-item.active .lesson-icon {
            background: #2196F3;
            color: white;
        }

        .lesson-info {
            flex: 1;
            min-width: 0;
        }

        .lesson-title {
            font-weight: 500;
            margin-bottom: 4px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .lesson-meta {
            display: flex;
            gap: 8px;
            font-size: 12px;
            color: #666;
        }

        .difficulty {
            background: #e0e0e0;
            padding: 2px 8px;
            border-radius: 3px;
        }

        .duration {
            background: #e0e0e0;
            padding: 2px 8px;
            border-radius: 3px;
        }

        .btn-block {
            display: block;
            width: 100%;
        }

        /* Lesson Selector (legacy - keep for backward compat) */
        .lesson-selector {
            margin-bottom: 20px;
        }

        .lesson-selector label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .lesson-dropdown {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: white;
            font-size: 14px;
            cursor: pointer;
        }

        .lesson-dropdown:focus {
            outline: none;
            border-color: #4CAF50;
        }

        /* Sidebar Instructions */
        .sidebar-instructions {
            flex: 1;
            margin-bottom: 20px;
            overflow-y: auto;
        }

        .sidebar-instructions h3 {
            font-size: 14px;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .sidebar-instructions h3:not(:first-child) {
            margin-top: 15px;
        }

        .sidebar-instructions code {
            background: #fff;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Monaco', 'Courier New', monospace;
            font-size: 12px;
        }

        .sidebar-instructions ul {
            margin-left: 18px;
            line-height: 1.5;
            font-size: 13px;
        }

        .sidebar-instructions li {
            margin: 6px 0;
        }

        .sidebar-instructions p {
            font-size: 13px;
            line-height: 1.5;
            margin: 8px 0;
        }

        .hint {
            background: #fff8dc;
            padding: 8px;
            border-left: 3px solid #ffa500;
            margin: 8px 0;
            border-radius: 3px;
            font-size: 12px;
        }

        .btn-text {
            background: transparent;
            border: none;
            color: #4CAF50;
            cursor: pointer;
            font-size: 12px;
            margin-top: 8px;
            padding: 4px 0;
        }

        .btn-text:hover {
            text-decoration: underline;
        }

        /* Sidebar Actions (at bottom) */
        .sidebar-actions {
            border-top: 1px solid #ddd;
            padding-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .btn-run {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
        }

        .btn-run:hover {
            background: #45a049;
        }

        .btn-run:disabled {
            background: #999;
            cursor: not-allowed;
        }

        .btn-secondary {
            background: #666;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 13px;
        }

        .btn-secondary:hover {
            background: #777;
        }

        .status-text {
            font-size: 12px;
            color: #666;
            text-align: center;
            padding: 4px 0;
            min-height: 20px;
        }

        /* Right Area: Editor + Output (80% width) */
        .right-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Editor Panel (adjusts based on content) */
        .editor-panel {
            flex: 0 0 40%;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            border-bottom: 2px solid #ddd;
        }

        .editor-container {
            flex: 1;
            position: relative;
            background: #282a36;
            overflow: hidden;
        }

        .editor-container .cm-editor {
            height: 100%;
            font-family: 'Monaco', 'Courier New', monospace;
            font-size: 14px;
        }

        .editor-container .cm-scroller {
            overflow: auto;
        }

        #editor {
            display: none;
        }

        /* Output Panel (takes remaining space ~60% with tabs) */
        .output-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            min-height: 0;
        }

        /* Output Tabs */
        .output-tabs {
            display: flex;
            background: #2d2d2d;
            border-bottom: 2px solid #444;
        }

        .tab-btn {
            flex: 1;
            padding: 10px;
            background: transparent;
            color: #aaa;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
        }

        .tab-btn:hover {
            background: #3d3d3d;
            color: #fff;
        }

        .tab-btn.active {
            background: #4CAF50;
            color: white;
        }

        .output-content {
            flex: 1;
            overflow: auto;
            background: white;
        }

        .output-content > div {
            height: 100%;
        }

        .canvas-container {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            overflow: auto;
        }

        .canvas-container svg {
            max-width: none;
            max-height: none;
            height: auto;
        }

        .output-text {
            padding: 20px;
        }

        .output-text pre {
            background: #f5f5f5;
            padding: 10px;
            border-radius: 4px;
            font-family: 'Monaco', 'Courier New', monospace;
            font-size: 13px;
        }

        /* Friendly Error Display - Category-based styling */
        .friendly-error {
            margin-top: 15px;
        }

        .error-card {
            border-radius: 6px;
            padding: 16px;
            margin: 12px 0;
            font-family: system-ui, -apple-system, sans-serif;
        }

        /* Python errors - Orange/Yellow theme (learning opportunity) */
        .error-card.python-error {
            background: #FFF3E0;
            border-left: 4px solid #FF9800;
        }

        .error-card.python-error .error-header h3 {
            color: #E65100;
        }

        /* Security errors - Blue theme (information, not punishment) */
        .error-card.security-error {
            background: #E3F2FD;
            border-left: 4px solid #2196F3;
        }

        .error-card.security-error .error-header h3 {
            color: #1565C0;
        }

        /* Timeout errors - Purple theme (performance issue) */
        .error-card.timeout-error {
            background: #F3E5F5;
            border-left: 4px solid #9C27B0;
        }

        .error-card.timeout-error .error-header h3 {
            color: #6A1B9A;
        }

        /* System errors - Gray theme (technical issue) */
        .error-card.system-error {
            background: #FAFAFA;
            border-left: 4px solid #757575;
        }

        .error-card.system-error .error-header h3 {
            color: #424242;
        }

        .error-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 12px;
        }

        .error-icon {
            font-size: 24px;
            line-height: 1;
        }

        .error-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .error-explanation {
            color: #333;
            margin: 0 0 12px 0;
            font-size: 15px;
            line-height: 1.5;
        }

        .error-location {
            background: #E3F2FD;
            border-radius: 4px;
            padding: 8px 12px;
            display: flex;
            gap: 8px;
            align-items: center;
            margin-bottom: 12px;
            font-size: 14px;
            color: #1565C0;
        }

        .location-icon {
            font-size: 16px;
            line-height: 1;
        }

        .error-hint {
            background: #FFF9C4;
            border-radius: 4px;
            padding: 10px 12px;
            display: flex;
            gap: 8px;
            align-items: flex-start;
            margin-bottom: 12px;
        }

        .hint-icon {
            font-size: 18px;
            line-height: 1;
        }

        .error-code-section {
            margin-top: 12px;
        }

        .error-code-header {
            font-size: 13px;
            font-weight: 600;
            color: #666;
            margin-bottom: 6px;
        }

        .error-code {
            background: #F5F5F5;
            border-radius: 4px;
            padding: 10px;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 13px;
            overflow-x: auto;
            border: 1px solid #E0E0E0;
        }

        .code-line {
            display: flex;
            gap: 12px;
            padding: 2px 4px;
        }

        .error-line {
            background: #FFCDD2;
            margin: 0 -4px;
            padding: 2px 4px;
            border-radius: 2px;
        }

        .line-number {
            color: #999;
            width: 30px;
            text-align: right;
            user-select: none;
            font-weight: 500;
        }

        .line-code {
            white-space: pre;
            flex: 1;
        }

        .print-output h4 {
            margin: 0 0 8px 0;
            font-size: 14px;
            color: #666;
        }

        .help-content {
            padding: 20px;
            line-height: 1.6;
            font-size: 14px;
        }

        /* Syntax highlighting for help content */
        .help-content .highlight {
            background: #282a36;
            color: #f8f8f2;
            padding: 12px 16px;
            border-radius: 6px;
            overflow-x: auto;
            margin: 12px 0;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 13px;
            line-height: 1.5;
        }

        .help-content .highlight .hll { background-color: #44475a }
        .help-content .highlight .c { color: #6272a4 } /* Comment */
        .help-content .highlight .err { color: #f8f8f2 } /* Error */
        .help-content .highlight .g { color: #f8f8f2 } /* Generic */
        .help-content .highlight .k { color: #ff79c6 } /* Keyword */
        .help-content .highlight .l { color: #f8f8f2 } /* Literal */
        .help-content .highlight .n { color: #f8f8f2 } /* Name */
        .help-content .highlight .o { color: #ff79c6 } /* Operator */
        .help-content .highlight .x { color: #f8f8f2 } /* Other */
        .help-content .highlight .p { color: #f8f8f2 } /* Punctuation */
        .help-content .highlight .ch { color: #6272a4 } /* Comment.Hashbang */
        .help-content .highlight .cm { color: #6272a4 } /* Comment.Multiline */
        .help-content .highlight .cp { color: #ff79c6 } /* Comment.Preproc */
        .help-content .highlight .cpf { color: #6272a4 } /* Comment.PreprocFile */
        .help-content .highlight .c1 { color: #6272a4 } /* Comment.Single */
        .help-content .highlight .cs { color: #6272a4 } /* Comment.Special */
        .help-content .highlight .gd { color: #8b080b } /* Generic.Deleted */
        .help-content .highlight .ge { color: #f8f8f2; text-decoration: underline } /* Generic.Emph */
        .help-content .highlight .gr { color: #f8f8f2 } /* Generic.Error */
        .help-content .highlight .gh { color: #f8f8f2; font-weight: bold } /* Generic.Heading */
        .help-content .highlight .gi { color: #f8f8f2; font-weight: bold } /* Generic.Inserted */
        .help-content .highlight .go { color: #44475a } /* Generic.Output */
        .help-content .highlight .gp { color: #f8f8f2 } /* Generic.Prompt */
        .help-content .highlight .gs { color: #f8f8f2 } /* Generic.Strong */
        .help-content .highlight .gu { color: #f8f8f2; font-weight: bold } /* Generic.Subheading */
        .help-content .highlight .gt { color: #f8f8f2 } /* Generic.Traceback */
        .help-content .highlight .kc { color: #ff79c6 } /* Keyword.Constant */
        .help-content .highlight .kd { color: #8be9fd; font-style: italic } /* Keyword.Declaration */
        .help-content .highlight .kn { color: #ff79c6 } /* Keyword.Namespace */
        .help-content .highlight .kp { color: #ff79c6 } /* Keyword.Pseudo */
        .help-content .highlight .kr { color: #ff79c6 } /* Keyword.Reserved */
        .help-content .highlight .kt { color: #8be9fd } /* Keyword.Type */
        .help-content .highlight .ld { color: #f8f8f2 } /* Literal.Date */
        .help-content .highlight .m { color: #bd93f9 } /* Literal.Number */
        .help-content .highlight .s { color: #f1fa8c } /* Literal.String */
        .help-content .highlight .na { color: #50fa7b } /* Name.Attribute */
        .help-content .highlight .nb { color: #8be9fd; font-style: italic } /* Name.Builtin */
        .help-content .highlight .nc { color: #50fa7b } /* Name.Class */
        .help-content .highlight .no { color: #f8f8f2 } /* Name.Constant */
        .help-content .highlight .nd { color: #f8f8f2 } /* Name.Decorator */
        .help-content .highlight .ni { color: #f8f8f2 } /* Name.Entity */
        .help-content .highlight .ne { color: #f8f8f2 } /* Name.Exception */
        .help-content .highlight .nf { color: #50fa7b } /* Name.Function */
        .help-content .highlight .nl { color: #8be9fd; font-style: italic } /* Name.Label */
        .help-content .highlight .nn { color: #f8f8f2 } /* Name.Namespace */
        .help-content .highlight .nx { color: #f8f8f2 } /* Name.Other */
        .help-content .highlight .py { color: #f8f8f2 } /* Name.Property */
        .help-content .highlight .nt { color: #ff79c6 } /* Name.Tag */
        .help-content .highlight .nv { color: #8be9fd; font-style: italic } /* Name.Variable */
        .help-content .highlight .ow { color: #ff79c6 } /* Operator.Word */
        .help-content .highlight .w { color: #f8f8f2 } /* Text.Whitespace */
        .help-content .highlight .mb { color: #bd93f9 } /* Literal.Number.Bin */
        .help-content .highlight .mf { color: #bd93f9 } /* Literal.Number.Float */
        .help-content .highlight .mh { color: #bd93f9 } /* Literal.Number.Hex */
        .help-content .highlight .mi { color: #bd93f9 } /* Literal.Number.Integer */
        .help-content .highlight .mo { color: #bd93f9 } /* Literal.Number.Oct */
        .help-content .highlight .sa { color: #f1fa8c } /* Literal.String.Affix */
        .help-content .highlight .sb { color: #f1fa8c } /* Literal.String.Backtick */
        .help-content .highlight .sc { color: #f1fa8c } /* Literal.String.Char */
        .help-content .highlight .dl { color: #f1fa8c } /* Literal.String.Delimiter */
        .help-content .highlight .sd { color: #f1fa8c } /* Literal.String.Doc */
        .help-content .highlight .s2 { color: #f1fa8c } /* Literal.String.Double */
        .help-content .highlight .se { color: #f1fa8c } /* Literal.String.Escape */
        .help-content .highlight .sh { color: #f1fa8c } /* Literal.String.Heredoc */
        .help-content .highlight .si { color: #f1fa8c } /* Literal.String.Interpol */
        .help-content .highlight .sx { color: #f1fa8c } /* Literal.String.Other */
        .help-content .highlight .sr { color: #f1fa8c } /* Literal.String.Regex */
        .help-content .highlight .s1 { color: #f1fa8c } /* Literal.String.Single */
        .help-content .highlight .ss { color: #f1fa8c } /* Literal.String.Symbol */
        .help-content .highlight .bp { color: #f8f8f2; font-style: italic } /* Name.Builtin.Pseudo */
        .help-content .highlight .fm { color: #50fa7b } /* Name.Function.Magic */
        .help-content .highlight .vc { color: #8be9fd; font-style: italic } /* Name.Variable.Class */
        .help-content .highlight .vg { color: #8be9fd; font-style: italic } /* Name.Variable.Global */
        .help-content .highlight .vi { color: #8be9fd; font-style: italic } /* Name.Variable.Instance */
        .help-content .highlight .vm { color: #8be9fd; font-style: italic } /* Name.Variable.Magic */
        .help-content .highlight .il { color: #bd93f9 } /* Literal.Number.Integer.Long */

        /* Loading Overlay */
        .loading {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px 40px;
            border-radius: 8px;
            font-size: 16px;
            z-index: 1000;
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .left-sidebar {
                width: 250px;
                min-width: 250px;
            }
        }

        @media (max-width: 768px) {
            .left-sidebar {
                position: fixed;
                left: 0;
                top: 0;
                bottom: 0;
                width: 280px;
                z-index: 100;
                box-shadow: 2px 0 10px rgba(0, 0, 0, 0.3);
            }

            .right-area {
                width: 100%;
            }
        }
    </style>
</head>

<body>
    <div x-data="appState()" class="app-container">

        <div class="error" id="error"></div>

        <!-- Main Layout: 2 Columns -->
        <div class="main-layout">

            <!-- Left Sidebar (20%) -->
            <aside x-show="showSidebar"
                   x-transition
                   class="left-sidebar">
                <!-- Collapse button -->
                <button @click="showSidebar = false; localStorage.setItem('showSidebar', 'false')" class="sidebar-collapse" title="Hide sidebar">
                    ◀
                </button>
                {% include 'components/sidebar.html' %}
            </aside>

            <!-- Expand button (when sidebar hidden) -->
            <button x-show="!showSidebar"
                    @click="showSidebar = true; localStorage.setItem('showSidebar', 'true')"
                    class="sidebar-expand"
                    title="Show sidebar">
                ▶
            </button>

            <!-- Right Area: Editor + Canvas (80%) -->
            <div class="right-area">

                <!-- Top: Editor (50%) -->
                <div class="editor-panel">
                    <div class="editor-container">
                        <textarea id="editor" spellcheck="false">{{ lesson.starter_code }}</textarea>
                    </div>
                </div>

                <!-- Bottom: Canvas/Output/Help Tabs (50%) -->
                <div class="output-panel">
                    {% include 'components/output-tabs.html' %}
                </div>

            </div>

        </div>
    </div>

    <div class="loading" id="loading">Loading Python... ⏳</div>

    <!-- Import Map for CodeMirror 6 -->
    <script type="importmap">
    {
        "imports": {
            "@codemirror/": "https://esm.sh/@codemirror/",
            "@lezer/": "https://esm.sh/@lezer/",
            "codemirror": "https://esm.sh/codemirror@6.0.1"
        }
    }
    </script>

    <script type="module">
        import { initEditor } from '{{ base_path }}/static/js/core/editorSetup.js';

        // Initialize editor when DOM is ready
        (async () => {
            // Get initial code from textarea
            const initialCode = document.getElementById('editor').value;

            // Initialize editor
            const editor = await initEditor(initialCode, () => window.runCode());

            // Hide the textarea since CodeMirror creates its own DOM
            document.getElementById('editor').style.display = 'none';

            // Expose editor to window for app state to access
            window.editorView = editor;

            // Disable run button until Pyodide is ready (enabled by lessonState.js)
            document.getElementById('runBtn').disabled = true;
        })();
    </script>

    <!-- Alpine.js (loads after modules are defined above) -->
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
</body>

</html>

<!-- OLD CODE BLOCK (removed - now in static/js/core/) - kept for reference during migration
    API DEFINITIONS moved to: static/js/core/apiDefinitions.js
    Editor setup moved to: static/js/core/editorSetup.js
    App state moved to: static/js/core/lessonState.js
-->
